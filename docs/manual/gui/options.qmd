# Settings {#sec-gui-settings}

## Input {#input-settings}

The following options are available when creating or editing a project.

**Folder/file to analyze**: enter into here the folder or file to analyze.

**Subfolders/files to ignore**: enter into this list the folders and files to ignore.

::: {.tipsection data-latex=""}
Folder and file paths being ignored must be absolute or relative to the folder being analyzed.
:::

{{< pagebreak >}}

## Source Code {#source-code-options}

The following options are available for C/C++ source files.

:::: {.optionssection data-latex=""}
::: {.optionssectiontitle data-latex=""}
Run the following checks
:::

**Strings not exposed for translation**: select this to check for strings hard coded in source code that not exposed for translation (i.e., embedded strings).

**Ignore strings assigned to variables named**: when finding strings not exposed for translation, strings can be ignored if assigned to variables from this list.
For example, if a list of color names are assigned to a variable named `colorMode` that you wish to ignore, then add "colorMode" to this list.
You can enter variable names (e.g., "`colorMode`") or regular expressions (e.g., "`(RELEASE|DEBUG)check[0-9]?`") here.

::: {.notesection data-latex=""}
Adding a new entry here for a project will also add it to the global settings.
This will ensure that you don't have to re-enter these values for future projects.
:::

Refer to @sec-embedded-strings for an overview of this issue.

**Translatable strings that shouldn\'t be**: select this to check for translatable strings that should not be (e.g., numbers, keywords, `printf()` commands).

Refer to @sec-exposed-internal for an overview of this issue.

**Translatable strings being used in debug functions**: select this to check for translatable strings being used in internal contexts (e.g., debugging and console functions).

**Translatable strings that contain URLs, email addresses, or phone numbers**: select this to check for translatable strings that contain URLs, email addresses, or phone numbers.
For situations such as a regional offices needing to use their own contact information in a localized product, it is recommended to leave this unchecked.
Otherwise, it is recommended perform this check and to dynamically format these items into the string so that translators do not have to manage them.

**Translatable strings that contain an excessive amount of non-translatable content**: select this to check for translatable strings that contain large blocks on non-translatable content.
As an example, this will detect strings with large blocks of HTML tags that may make the string complicated to translate.
In this case, it may be recommended to format the string, replacing the HTML content with placeholders (e.g., `printf` commands).
Another option is to concatenate the HTML tags with the localizable string at runtime.

::: {.tipsection data-latex=""}
Adding a context to the string resource (e.g., a translator comment) will suppress this warning.\

For example, a resource such as "%d of %zu" will emit this warning.
Although not much can be done about the majority of this string being `printf` commands, a translator comment would help with explaining what they represent.
By adding a comment, this warning (along with any ambiguity warnings) will be removed.
:::
::::

:::: {.optionssection data-latex=""}
::: {.optionssectiontitle data-latex=""}
Run the following checks (*continued...*)
:::
**Concatenated strings**: select this to check for translatable strings that start or begin with spaces.
(This is limited to actual space characters, and does not include tabs or newlines.)

These may be strings that are concatenated at runtime, which does not follow best i18n practices.
It is recommended to format separate values into a single string via a `printf` formatting function, rather than
piecing them together.

::: {.notesection data-latex=""}
An exception is made for strings that end with a colon followed by a space (": ").
It is assumed that this part of tabular data being concatenated and will be ignored.
:::

Refer to @sec-concatenated-strings for an overview of this issue.

**Literal, localizable strings being compared or searched for**: select this to check for literal, localizable strings being compared or searched for.
This usually indicates a string being marked for localization in multiple places and the program assuming they will all be translated the same way.
This is a dangerous assumption and can likely break the program.

Instead, it is recommended to expose the string for localization from one location and use that throughout the program.
For example, the string could be defined as a constant variable or returned from a common function.

Refer to @sec-literal-strings-cmp for an overview of this issue.

**Multipart strings ("mega strings")**: select this to check for strings that appear to contain multiple parts that are being sliced into separate strings at runtime.

Refer to @sec-multipart-strings for an overview of this issue.

This check should be ran when modernizing legacy software.

**Strings used for both singular and plural**: select this to check for strings being used for both singular and plural variations.

Refer to @sec-pluralization for an overview of this issue.

**Articles/pronouns mixed with dynamic content**: select this to check for strings with an article (e.g., "the," "a") in front of a formatting placeholder.
Additionally, this will check for pronouns being used as individual strings.

Refer to @sec-articles and @sec-pronouns for an overview of this issue.
::::

:::: {.optionssection data-latex=""}
::: {.optionssectiontitle data-latex=""}
Run the following checks (*continued...*)
:::
**Suspect i18n usage**: select this to check for suspect usage of i18n functions and project settings.

This will check for issues such as:

- Usage of the Win32 function `::LoadString()`\index{Windows!string loading issues}.\
  It is recommended to use other functions (e.g., `CString::LoadString()`) that are not limited to fixed buffer sizes; otherwise, translated strings may become truncated.
- Context arguments passed to l10n functions (e.g., `tr()`) that are longer than 32 characters.\
  This may indicate that the context and translatable string arguments are reversed.
- String literals being passed to `_()` and `wxPLURAL()`.
- Possible strings meant for translation being passed to ID loading functions (e.g., `qtTrId()`).
- Using two-digit year specifiers (\'%g\', \'%y\', and \'%C\') in `strftime`-like functions.\
  This causes ambiguity between years and months/days for end users and is also not Y2K compliant\index{Y2K compliance}.
- macOS Info.plist files not including any `CFBundleLocalizations` keys\index{macOS!Info.plist issues}.\
  Without these keys, translations will not be loaded by the application at runtime.
- *wxWidgets* projects not calling `wxUILocale::UseDefault()`\index{wxWidgets!locale initialization}.
- *wxWidgets* projects not constructing a `wxLocale` object with the user's locale.\
  `wxLocale` objects are only necessary if your project relies on C runtime functions to use the user's locale.
  This is only detected if **Include verbose warnings** is checked.

**Check for ambiguous strings that lack a translator comment**: select this to check for possibly ambiguous strings that lack a translator comment.
*gettext*- and *Qt*-style comments are searched for, which includes formats such as "// TRANSLATORS: " and "//:".

A string will be considered ambiguous if:

- A single word in all caps.
- A single word with multiple punctuation marks embedded in it.
- It contains placeholder text (e.g., "###").
- It contains more than one abbreviation. (Abbreviations should be avoided, or at least the full words should be shown in a translator comment.)
- A short string with a `printf` or positional argument (e.g., "%2").
- A longer string with multiple `printf` or positional arguments.

::: {.notesection data-latex=""}
`printf` or positional arguments will be ignored if following a colon and space.
For example, a string such as "Name: %s\\nDate: %s\\Location: %s" may not need a comment.
It is assumed that the label in front of the colon serves as a description for the following "%s"; thus, a warning will not be emitted. 
:::

**Deprecated macros and functions**: select this to check for deprecated text macros and functions.
This will detect the usage of functions that are no longer relevant, and provide a suggested replacement.

For example, the `TCHAR` functions and macros used in Win32 programming (e.g., `_TEXT`, `_tcscmp`) to help target Windows 98 and NT are no longer necessary.
`Quneiform` will recommend how to remove or replace these.

**printf functions being used to just format a number**: select this to check for `printf()`-like functions being used to just format a number.
In these situations, it is recommended to use the more modern `std::to_[w]string()` function.
This is limited to integral values; `printf()` commands with floating-point precision will be ignored.

**Malformed syntax in strings**: select this to check for malformed syntax in strings (e.g., malformed HTML tags).
::::

**Strings passed to logging functions can be translatable**: select this if it should be acceptable to pass translatable strings to logging functions.
Setting this to `false` will emit warnings when a translatable string is passed to functions such as `wxLogMessage`, `g_message`, or `qCWarning`.

**Exception messages should be available for translation**: select this to verify that exception messages are available for translation.
Setting this to `true` will emit warnings when untranslatable strings are passed to various exception constructors or functions
(e.g., `AfxThrowOleDispatchException`).

**Punctuation only strings can be translatable**: select this if it should be acceptable for punctuation only strings to be translatable.
Setting this to `true` will suppress warnings about strings such as "*? - ?*" being available for localization.

**Minimum words for a string to be considered translatable**: enter into here the minimum number of words that a string must have to be considered translatable.
Higher values for this will result in less strings being classified as `notL10NAvailable` warnings.

::: {.notesection data-latex=""}
Words in this context are values that contain at least one letter; numbers, punctuation, and syntax commands are ignored.
For example, "Printing %s," "Player 1," and "Add +" will be seen as one-word strings.
:::

**C++ standard when issuing deprecation warnings**: enter into here the C++ standard that should be assumed when issuing deprecated macro warnings (`deprecatedMacro`).
For example, setting this to `2017` or higher (along with selecting the **Include verbose warnings** option) will issue warnings for `WXUNUSED`\index{wxWidgets!deprecated macros}, as it can be replaced with `[[maybe_unused]]`.
If setting this to `2014`, however, `WXUNUSED` will be ignored since `[[maybe_unused]]` requires C++17.

**Include verbose warnings**: select this to perform additional checks, including those that may not be related to i18n/l10n issues.
This will also include additional information in the **Analysis Log** window.

{{< pagebreak >}}

## Resource Files {#resource-file-options}

The following options are available for resource files (i.e., \*.po and \*.rc).

:::: {.optionssection data-latex=""}
::: {.optionssectiontitle data-latex=""}
Translation catalogs
:::

**Check for inconsistent printf & positional format specifiers**: select this to check for mismatching `printf()` and positional commands between source and translation strings.
(This will review "c-format," "kde-format," and "qt-format" strings in *gettext* files.)

::: {.warningsection data-latex=""}
The checks performed here are strict; all `printf()` commands in translations must match their source counterpart exactly.
For example, "*%lu*" vs. "*%l*" will emit a warning.
Questionable commands such as "*% s*" (space is only meant for numeric formatting) will also emit a warning.
:::

**Check for inconsistent keyboard accelerators**: select this to check for mismatching keyboard accelerators between source and translation strings.
This is performed by checking that both strings contain one '&' followed by an alphanumeric character.

**Check for inconsistent casing, separators, trailing punctuation, spaces, or newlines**: select this to check for the following between source and translation strings:

- Mismatching trailing punctuation, spaces, or newlines,
- The source string starting with an uppercase letter and the translation starting with a lowercase letter.
- Mismatching number of "\\t" and "|" symbols.

In regards to punctuation, terminating characters such as periods, exclamation points, question marks, and colons are reviewed.
For these, warnings will only be emitted if the source string has a terminating mark and the translation does not have either a terminating mark or closing parenthesis.
All types of terminating marks are treated interchangeably, as not all languages commonly use question and exclamation marks as much as English.

**Check for inconsistent numbers**: select this to check for mismatching numbers between the source and target strings.

Devanagari and full-width numbers will be converted to 7-bit ASCII numbers during the comparison.
This ensures that "8859-1" and "８８５９-１" will be seen as the same number sequence.

::: {.notesection data-latex=""}
Numbers will have all commas, periods, and non-breaking spaces removed when being compared.
This is done to normalize any differences in locale-specific formatting and provide more accurate comparisons.
Because of this, the list of numbers shown in these warnings will not include any decimal or thousands separators.\

Also, the sequence of mismatching numbers in the warning message will be displayed in lexicographical order, not the order that they appear in the strings.
It is assumed that the ordering of numbers can change in the translation; thus, the ordering of numbers is normalized and shown in this way in the warning.
:::
::::

:::: {.optionssection data-latex=""}
::: {.optionssectiontitle data-latex=""}
Translation catalogs (*continued...*)
:::
**Check for halfwidth characters**: select this to check for halfwidth Kanas, Hanguls, and punctuation in source and target strings.

Halfwidth characters are generally only needed in legacy applications, where translations are limited to certain lengths.
For example, applications that require a translation to not exceed its source string's length may need to resort to halfwidth Kanas (e.g., "ｼ") to accomplish this.
For modern applications, it is preferred to use the fullwidth counterparts (e.g., "シ"), as it appears more professional.

Including this check can be useful when updating translations for legacy applications undergoing modernization.

**Check for suspect translation lengths**: select this to check for translations that are suspiciously longer than their source strings.

The default is 400%, meaning that a translation can be four times longer than the source string before emitting a warning.
This value can be changed by adjustsing the **How much translations can expand** slider.

::: {.tipsection data-latex=""}
Setting this to 0% will instruct the program to warn if any translation exceeds the length of its source string by even one character.
This is useful for legacy software where resource-loading routines are using the source strings' hardcoded lengths.
:::

**Review fuzzy translations**: select this to review fuzzy translations. This should only be selected if you intend to review translations
that still require approval and are likely unfinished.
::::

:::: {.optionssection data-latex=""}
::: {.optionssectiontitle data-latex=""}
Translation catalogs (*continued...*)
:::
**Pseudo-translation**

While analyzing translation catalogs, copies of them can also be created and be pseudo-translated.
Later, these catalogs can be loaded by your application for integration testing.

:::: {.optionssection data-latex=""}
::: {.optionssectiontitle data-latex=""}
Method
:::

This option specifies how to generate pseudo-translations.

**None (do not generate anything)**: instructs the program to not generate any files.

**UPPERCASE**: translations will be uppercased variations of the source strings.

**Fill with \'X\'es**: letters from the source string will be replaced with either \'x\' or \'X\' (matching the original casing).
This will produce the most altered appearance for the pseudo-translations.

During integration testing, these pseudo-translations will be easier to spot, but will make navigating the UI more difficult.
This is recommended for the quickest way to interactively find UI elements that are not being made available for translation.

**European**: letters and numbers from the source string will be replaced with accented variations from European alphabets.
The translation will be clearly different, but still generally readable.

**Cherokee**: letters and numbers from the source string will be replaced with Cherokee characters.
(Some numbers will be replaced with full-width numbers when a similiar looking Cherokee character isn't available.)
Like **European**, translations will be clearly different, but somewhat readable.
::::

**Add surrounding brackets**: select this option to add brackets around the pseudo-translations.
This can help with identifying truncation and strings being pieced together at runtime.

**Add tracking IDs**: select this to add a unique ID number (inside or square brackets) in front of every pseudo-translation.
This can help with finding where a particular translation is coming from.

**Expand/contract width**: select how much wider and shorter (between -50--100%) to make pseudo-translations.
For widening, strings are padded with hyphens on both sides.
For shortening, as many characters from the translatable sections of the string will be removed to meet the requested percentage.

The default is a 40% increase, as "German and Spanish translations can sometimes take 40% more screen space than English" [@boyero:2020].

::: {.notesection data-latex=""}
If surrounding brackets or tracking IDs are being included, then their lengths will be factored into the increased/decreased width calculation.
:::
::::

:::: {.optionssection data-latex=""}
::: {.optionssectiontitle data-latex=""}
Windows RC files
:::

**Check for font issues**: select this to check for dialogs that use unusual font sizes
or are not using \'MS Shell Dlg\'.\index{Windows!resource file issues}
::::

::: {.notesection data-latex=""}
Some static analysis options from the **Source Files** section will also be used while analyzing the source strings
in these resource files.
:::

{{< pagebreak >}}

## Additional Checks

The following additional options are available for C/C++ source files.
These options do not relate to internationalization, but are offered as supplemental checks for code formatting and other issues.

:::: {.optionssection data-latex=""}
::: {.optionssectiontitle data-latex=""}
Formatting & encoding checks
:::

**Non-UTF8 encoded files**: select this to check that files containing extended ASCII characters are UTF-8 encoded.
UTF-8 is recommended for compiler portability.

**BOM/UTF-8 signatures**: select this to check for UTF-8 encoded files which start with a BOM/UTF-8 signature.
It is recommended to save without the file signature for best compiler portability.

**Unencoded extended ASCII characters**: select this to check for strings containing extended ASCII characters that are not encoded.

**Trailing spaces**: select this to check for trailing spaces at the end of each line.

**Tabs**: select this to check for tabs.
(Spaces are recommended as tabs may appear differently between editors.)

**Overly long lines**: select this to check for overly long lines.

**Comments not starting with a space**: select this to check that there is a space at the start of a comment.
::::

:::: {.optionssection data-latex=""}
::: {.optionssectiontitle data-latex=""}
Code checks
:::

**Hard-coded ID numbers**: select this to check for ID variables being assigned a hard-coded number.
It may be preferred to assign framework-defined constants (e.g., `wxID_HIGHEST`) to IDs.

**ID variables assigned the same value**: select this to check for the same value being assigned to different ID variables.
This check is performed per file; the same ID being assigned multiple times, but within separate files, will be ignored.

For MFC\index{Windows!MFC ID issues} projects, this will also check for MFC resource IDs that are outside of expected ranges.
For example, IDs starting with `IDS_` (a string ID) should be between 1 and 0x7FFF.
::::
