```{r}
#| include: false
#| eval: true

source('../R/appdown.r')
```

# Editing

When a source file in the loaded in the editor and the editor is selected, the **Edit** section of the ribbon will become enabled.
From here, you can edit the source file in the **Editor** and make use of these options from the ribbon.

## Basic Operations

Clipboard operations (e.g., `r keys("Cut")`, `r keys("Copy")`, and `r keys("Paste")`), `r keys("Undo")`, `r keys("Redo")`, and `r keys("Select All")` are all available from this section.

## Insert

From the `r keys("Insert")` button, options are available for inserting and converting content within the editor to fix various warnings.

### Translator Comment {-}

To fix warnings about strings needing context, place the cursor into the editor in front of a resource loading call (e.g., `_("TABLE")`).
Next, click the `r keys("Insert")` button on the ribbon and select **Translator Comment...**.
Then, select which translator comment style that you wish to use. (*gettext* and *Qt* styles are available.)
Enter a comment that will explain to the translators what "TABLE" means in this context, providing guidance for how they should translate it.
Click `r keys("OK")` and your comment with the comment style that you selected (e.g., "// TRANSLATORS: ") will be inserted in front of the function call.

::: {.notesection data-latex=""}
This warning is emitted when the option **Check for ambiguous strings that lack a translator comment** (from the **Source Files** settings) is checked.
:::

### Encode Extended ASCII Characters {-}

To fix warnings about extended ASCII characters needing to be encoded, highlight the text in the editor which contains these characters.
Next, click the `r keys("Insert")` button on the ribbon and select **Encode Extended ASCII Characters...**.
You will then be prompted about how the selection will be re-encoded.
Click `r keys("OK")` and the selection will be replaced with the re-encoded content.

As an example, if you have the string "Błąd" (Polish for "Error") in a source file, some legacy compilers may have difficulty processing it (even if encoded as UTF-8).
By following the aforementioned steps, this will be re-encoded to "B\\U00000142\\U00000105d."

::: {.notesection data-latex=""}
This warning is emitted when the option **Unencoded extended ASCII characters** (from the **Additional Checks** settings) is checked.
:::

### Make Selection Translatable {-}

To make a string translatable, highlight the string in the editor and select **Make Selection Translatable...** from the `r keys("Insert")` button.
From the **Make Selection Translatable** dialog, options are available for choosing which translation function to use, along with providing a domain or context (if applicable).
The translation marking functions available are compatible with *gettext*, *wxWidgets*, *Qt*, and *KDE*.

### Mark Selection as Non-translatable {-}

To mark a string as non-translatable, highlight the string in the editor and select **Mark Selection as Non-translatable...** from the `r keys("Insert")` button.
From the **Mark Selection as Non-translatable** dialog, options are available for which function to wrap the string in, along with providing an optional context and comment.
These functions will mark the string as non-translatable and **Quneiform** will ignore them during an analysis.
Additionally, these functions and comments decorating a string will inform developers that the string is not meant for translation and why.

### Suppress Warnings for Selection {-}

To suppress warnings for the selected block of code, highlight the string in the editor and select **Suppress Warnings for Selection...** from the `r keys("Insert")` button.
From the **Suppress Warnings for Selection** dialog, options are available for which analysis program to suppress warnings from, along with which specific warnings to suppress (if relevant).
After selecting the application to suppress and clicking `r keys("OK")`, the selected code in the editor will be wrapped in the appropriate suppression comments.

Along with *Quneiform*, warning suppression comments are also available for other linting tools such as *Clang-format*, *Clang-tidy*, and *Cpp-check*.
