::: {.content-visible when-format="html"}
<!-- Just want this preface in the gitbook.
     PDF output will have its own copyright page after the title.-->

This book is the guide to using *Eclipse Quneiform*^®^, an internationalization & localization analysis system for C++ code and translation resources.

![](images/by-sa.png)

This book is licensed under the [Creative Commons Attribution-Sharealike 4.0 International License](https://creativecommons.org/licenses/by-sa/4.0/).
:::

# Overview

`Quneiform` is a command-line utility and graphical user interface that scans source and resource files to check for
various i18n and l10n issues. Additionally, the GUI version provides pseudo-translation support for
*gettext* catalogs (\*.po files).

## File Support

`Quneiform` supports static analysis for the following:

- C code
- C++ code ('98 and modern C++)
- Windows resource files (\*.rc)
- macOS application Info.plist files

Static analysis and pseudo-translation are available for:

- GNU *gettext* translation files (\*.po and \*.pot)

Additionally, it offers specialized support for the following frameworks:

- wxWidgets
- Qt
- KDE
- GTK^+^
- Win32
- MFC

{{< pagebreak >}}

## Static Analysis

The command line and GUI versions provide the following checks:

- Strings exposed for translation[^1] that probably should not be. This includes (but not limited to):
  - Filenames
  - Strings only containing `printf()` commands
  - Numbers
  - Regular expressions
  - Strings inside of debug functions
  - Formulas
  - Code (used for code generators)
  - Strings that contain URLs or email addresses
- Strings not available for translation that probably should be.
- Localizable strings being concatenated at runtime.
- Use of deprecated text macros (e.g., `wxT()` in wxWidgets, `_T()` in Win32).
- Use of deprecated string functions (e.g., `_tcsncpy()` in Win32).
- Suspect usage of i18n functions.
- Strings with malformed syntax (e.g., malformed HTML tags).
- Files that contain extended ASCII characters, but are not UTF-8 encoded.<br />
  (It is recommended that files be UTF-8 encoded for portability between compilers.)
- Strings that contain extended ASCII characters that are not encoded.
  ("Danke schön" instead of "Danke sch\\U000000F6n".)<br />
  Encoding extended ASCII characters is recommended for
  best portability between compilers.
- UTF-8 encoded files which start with a BOM/UTF-8 signature.<br />
  It is recommended to save without the file signature for best compiler portability.
- `printf()`-like functions being used to just format an integer to a string.<br />
  It is recommended to use `std::to_string()` to do this instead.
- Pluralization and pronoun issues.
- Usage of half-width characters.
- Literal, localizable strings being used in search and comparison functions.
- `printf()` command mismatches between source and translation strings.
- Accelerator mismatches between source and translation strings.
- Number mismatches between source and translation strings.
- Complicated strings that should have translator comments added.
- Font issues in Windows resource files [@rc-string-tables]:
  - Dialogs not using "MS Shell Dlg" or "MS Shell Dlg 2."
  - Dialogs with non-standard font sizes.
- Info.plist files not including any `CFBundleLocalizations` keys.

Code formatting and other issues can also be checked for, such as:

- Trailing spaces at the end of a line.
- Tabs (instead of spaces).
- Lines longer than 120 characters.
- Spaces missing between "//" and their comments.
- ID variable[^2] assignment issues:
  - The same value being assigned to different ID variables in the same source file
    (e.g., "wxID_HIGHEST + 1" being assigned to two menu ID constants).
  - Hard-coded numbers being assigned to ID variables.
  - Out-of-range values being assigned to MFC IDs [@mfc-ids].
  
{{< pagebreak >}}

## Pseudo-translation

(available in the GUI version)

Pseudo-translation includes features such as:

- Multiple methods for character replacement (e.g., replacing characters with accented variations or upper casing them).
- Increasing the width of the translations. This is useful for ensuring that strings are not being truncated at runtime.
- Wrapping the translations in braces. This is useful for ensuring that strings are not being pieced together at runtime.
- Appending a unique ID to each translation. This is useful for finding where a translation is being loaded from.

When pseudo-translating, a copy of all string catalogs will be created and have their translations filled
with mutations of their respective source strings.
These files (which will have a "pseudo\_" prefix) can then be compiled and loaded by your application for integration testing.

::: {.notesection data-latex=""}
After processing a folder, the **Analysis Log** tab of the bottom window will display a list of all pseudo-translated resource files that were generated.
:::

[^1]: Strings are considered translatable if inside of [gettext](https://www.gnu.org/software/gettext/),
[wxWidgets](https://www.wxwidgets.org), [Qt](https://www.qt.io), or
[KDE](https://develop.kde.org/docs/plasma/widget/translations-i18n) (ki18n) i18n functions.
This includes functions and macros such as `gettext()`, `_()`, `tr()`, `translate()`,
`QT_TR_NOOP()`, `wxTRANSLATE()`, `i18n()`, etc.<br />
[^2]: Variables are determined to be ID variables if they are integral types with the whole word "ID" in their name.
