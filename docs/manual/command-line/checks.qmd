- `allI18N`

Perform all internationalization checks (the default).

- `suspectL10NString`

Check for translatable strings that should not be (e.g., numbers, keywords, `printf()` commands).
This will also check for bad formatting in *Quarto* files that make text extraction difficult.

- `suspectL10NUsage`

Check for translatable strings being used in internal contexts (e.g., debugging and console functions).

- `suspectI18NUsage`

Check for suspect usage of i18n functions.

- `urlInL10NString`

Check for translatable strings that contain URLs, email addresses, or phone numbers.

It is recommended to dynamically format these into the string so that translators
do not have to manage them.

- `excessiveNonL10NContent`

Check for translatable strings that contain large blocks on non-translatable content.

- `concatenatedStrings`

Check for strings that may be concatenated at runtime, which does not follow best i18n practices.
This is generally accomplished by detecting strings that have leading or trailing spaces.
(This is limited to actual space characters, and does not include tabs or newlines.)

::: {.notesection data-latex=""}
An exception is made for strings ending with ": "; here, it is assumed that this is formatting tabular data, rather than
piecing a message together.
:::

- `literalL10NStringCompare`

Check for literal, localizable strings being compared or searched for.

- `L10NStringNeedsContext`

Check for ambiguous strings that lack a translator comment.

Translator comments can be added to *gettext* functions by either inserting a tagged comment in front of them or by using
a variant with a context parameter (e.g., `wxTRANSLATE_IN_CONTEXT()`). For example:

``` {.cpp}
ListFiles(wxString::Format(
        /* TRANSLATORS: %s is folder name */ _(L"Searching %s"),
        get_selected_dir()));
```

By default, *gettext* will extract comments beginning with "TRANSLATORS:" in front of a resource function as
a comment for the translator.

Strings are considered to be ambiguous if they meet any of the following criteria:

- A single word that contains 32 characters or more
- A single word that is uppercased (e.g., "FACTOR_VAR")
  - Punctuation is ignored for this check
- A single word that contains more than one punctuation mark (e.g., "$Print$")
  - Note that hyphens, slashes, periods, and ampersands are ignored for this check
- Contains three or more `printf` commands
- Contains at least one `printf` command and is less than 16 characters

- `notL10NAvailable`

Check for strings not exposed for translation.

- `deprecatedMacro`

Check for deprecated text macros and functions.

This will detect the usage of functions that are no longer relevant, and provide a suggested replacement.

For example, the `TCHAR` functions and macros [@win32-strings; @win32-strings-guide] used in Win32 programming
(e.g., `_TEXT`, `_tcscmp`) to help target Windows 98 and NT are no longer necessary.
*Quneiform* will recommend how to remove or replace these.

- `nonUTF8File`

Check that files containing extended ASCII characters are UTF-8 encoded.

UTF-8 is recommended for compiler portability.

- `UTF8FileWithBOM`

Check for UTF-8 encoded files which start with a BOM/UTF-8 signature.

It is recommended to save without the file signature for best compiler portability.

This is turned off by default.

- `unencodedExtASCII`

Check for strings containing extended ASCII characters that are not encoded.

This is turned off by default.

- `printfSingleNumber`

Check for `printf()`-like functions being used to just format a number.

In these situations, it is recommended to use the more modern `std::to_[w]string()` function.

This is limited to integral values; `printf()` commands with floating-point precision will be ignored.

- `dupValAssignedToIds`

Check for the same value being assigned to different ID variables.

This check is performed per file; the same ID being assigned multiple times,
but within separate files, will be ignored.

This is turned off by default.

- `numberAssignedToId`

Check for ID variables being assigned a hard-coded number.

It may be preferred to assign framework-defined constants (e.g., `wxID_HIGHEST`) to IDs.

This is turned off by default.

- `malformedString`

Check for malformed syntax in strings (e.g., malformed HTML tags).

- `fontIssue`

Check for font issues.

This is performed on Windows *.rc files and checks for dialogs that use unusual font sizes
or are not using \'MS Shell Dlg\'.[@ms-shell-dlg]

- `allL10N`

Perform all localization checks (the default).

- `printfMismatch`

Check for mismatching `printf()` commands between source and translation strings.

This is performed on *gettext* \*.po files and will analyze format strings for the following languages:

- C/C++

::: {.warningsection data-latex=""}
The checks performed here are strict; all `printf()` commands in translations must match
their source counterpart exactly.
For example, "*%lu*" vs. "*%l*" will emit a warning.
Questionable commands such as "*% s*" (space is only meant for numeric formatting) will also emit a warning.
:::

- `acceleratorMismatch`

Check for mismatching keyboard accelerators between source and translation strings.
This is performed by checking that both strings contain one '&' followed by an alphanumeric character.

This is performed on *gettext* \*.po files.

- `transInconsistency`

Check for inconsistent punctuation, untranslatable names, etc.

This is performed on *gettext* \*.po files.

- `untranslatables`

Comma-separated list of words that should not be translated within *gettext* \*.po files.
`transInconsistency` must be enabled to perform this check.

::: {.tipsection data-latex=""}
If including phrases with spaces, wrap the entire argument in double quotes.
:::

- `numberInconsistency`

Check for mismatching numbers between the source and target strings.

This is performed on *gettext* \*.po files.

- `halfWidth`

Check for halfwidth Kanas, Hanguls, and punctuation in source and target strings.

This is performed on *gettext* \*.po files.

- `multipartString`

Check for strings that appear to contain multiple parts that are being sliced at runtime.

- `pluralization`

Check for strings being used for both singular and plural that should be use different variations.

- `articleOrPronoun`

Check for strings with an article (e.g., "the," "a") in front of a formatting placeholder.
Also checks for pronouns being used as individual strings.

- `lengthInconsistency`

Check for suspect lengths of translations compared to their source strings.

This is performed on *gettext* \*.po files.

- `allCodeFormatting`

Check all code formatting issues (see below).

::: {.notesection data-latex=""}
These are not enabled by default.
:::

- `trailingSpaces`

Check for trailing spaces at the end of each line.

- `tabs`

Check for tabs.
(Spaces are recommended as tabs may appear differently between editors.)

- `wideLine`

Check for overly long lines.

- `commentMissingSpace`

Check that there is a space at the start of a comment.
