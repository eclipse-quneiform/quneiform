
```{r}
#| include: false
#| eval: true

source('../R/appdown.r')
```

# Internationalization Issues

Internationalization (i18n) occurs during the development stage of software, which includes (but not limited to) the following areas:

- Preparing the program to display numbers and dates using the client's regional settings.
- Exposing strings for translation.
- Ensuring that strings not meant for translation are not exposed to translators.

I18N issues include any problems during this stage which will later affect either translation efforts or regional display issues for clients.
This chapter will discuss these various issues and provide recommendations for how to detect and correct them using *Quneiform*.

## Embedded Strings {#sec-embedded-strings}

Embedded strings are strings that are hard coded in source code and not made available for translation.
It is recommended to expose these strings to translators via mechanisms such as *gettext* functions, string tables, \*.resx files, etc.

In *Quneiform*, checking the option [**Strings not exposed for translation**](#source-code-options) will warn about any embedded strings in the source code.

Additionally, resource catalogs can also be [pseudo-translated](#resource-file-options) to assist with finding UI strings that are not available to translators.

## Concatenated Strings {#sec-concatenated-strings}

When multiple strings are pieced together at runtime, this creates a concatenated string.
Consider the following code sample:

```{Rcpp}
#| include: true
#| eval: false

wxString TOO_DIFFICULT_DESCRIPTION =
        _(L"Text is too difficult to be classified to a specific grade level because "
           "it contains too many ");
TOO_DIFFICULT_DESCRIPTION += fryGraph->GetScores().front().IsWordsHard() ?
                            _(L"high syllable words.") :
                            _(L"long sentences.");
```

Here, we see a string "...it contains too many " being concatenated with either "high syllable words." or "long sentences.".
This is an issue because it assumes that translations will follow the same word ordering and grammar as the source language.
Also, it fails to provide context to the translator as to what all is being combined into this message.
Rather than seeing a single message, translators are faced with multiple string resources without knowing that they even relate to each other.

In this example, the solution is to create two full (albeit lengthy) string resources for both variations of the possible message.

Checking the option [**Concatenated strings**](#source-code-options) will warn about any possible concatenated strings.

## Articles and Dynamic Content {#sec-articles}

An article (e.g., "an", "the") proceeding dynamic content in a string presents grammatical issues for translators.
For example, consider this string:

"Find the {}"

In the above example, the "{}" placeholder is probably being used in multiple contexts.
The issue with this is that many languages have multiple articles that change based on the noun they relate to [@{celek:2019}21].
In the case of German, translating "the" as "die," "der," or "das" is bound to be incorrect for some of the instances where this string is used.

This can even be an issue for English. For example, with this resource:

"A %s is required"

'A' will be grammatically incorrect if "%s" is replaced with a word starting with a vowel sound.

It is better to have multiple string resources, one for each noun variation, rather than relying on placeholders.
This ensures grammatically correct translations, as well as removing ambiguity for the translators.

## Pronouns and Dynamic Content {#sec-pronouns}

Strings that consist only of a pronoun (e.g., "him," "she") will present grammatical problems if being formatted into larger messages.
It is recommended to use multiple string resources with each pronoun variation instead replacing placeholders with these values.
Another option is to use gender-neutral language instead of relying on a list of dynamic pronouns [@{perezsaenz}33].

As an example, assume we have these string resources:

"her"

"him"

"them"

And we have another message:

"Provide %s the reset link"

which dynamically replaces "%s" with one of the above values.

First, we should remove all three pronoun strings.
Then we can provide three versions of the full message, replacing the "%s" with each of the pronouns.
This will ensure that translators will have full control over how to translate the message when the gender changes.

Another option is to replace the message with gender-neutral language:

"Provide **the user** the reset link"

## Pluralization {#sec-pluralization}

The same message being used for both singular and plural situations presents issues because grammar issues between the source and target languages.

These type of strings are generally used in two situations:

- When a quantity is dynamically formatted into the message.
- When a quantity is not known and the message is simply conveying that one or more items can be involved.

For the former, it is preferred to have two (or more) separate resource strings; one for singular and one (or more) for plural variations.
Some frameworks provide pluralization functions (`ngettext()`, `wxPLURAL()`) which can be used to provide separate strings for these variations.
As an example:

"%zu item(s)"

Here a number is being formatted into this message at runtime. It is better to pass singular and plural variations to a pluralizing function instead. For example:

```{Rcpp}
#| include: true
#| eval: false

wxPLURAL("%zu item", "%zu item", items.size())
```

For the latter, it is preferred to reword the string (removing the "(s)").
As an example:

"Variable(s) must be selected for the '%s' list."

This could be reworded to:

"At least one variable must be selected for the '%s' list."

or

"Variables must be selected for the '%s' list."

Checking the option [**Strings used for both singular and plural**](#source-code-options) will warn about this issue.

## Exposed Internal Strings {#sec-exposed-internal}

Strings that should not be translated should never be exposed to translators, even if context and translator comments are provided to warn them.
In other words, if it shouldn't be translated, then it shouldn't be in the resources.

This can include internal strings being used to build syntax (e.g., HTML code), GUIDs, filenames, font names, debug messages, etc.
This can also include URLs and email addresses, unless translators need to provide different contact information (for regional offices, for example).

Checking the options [**Translatable strings that shouldn\'t be**](#source-code-options), **Translatable strings being used in debug functions**, and **Translatable strings that contain URLs, email addresses, or phone numbers** will help with detecting these issues.

## Comparing Translator Strings {#sec-literal-strings-cmp}

When find and comparison functions contain a literal, localizable string, this usually indicates that this string is exposed for translation in multiple places.
This can be a problem for a couple of reasons.
The first is that it assumes translators will localize these strings the same way.
Although tools like *gettext* will usually combine multiple instances of the same string, it won't if any of them have a unique context added to them.
By design, these different instances will be presented separately and translators may translate them differently.
Consider the following example:

```{Rcpp}
#| include: true
#| eval: false
...
else if (selectedTest == _(L"Dolch Sight Words"))
    {
    wxGetApp().GetMainFrame()->DisplayHelp(L"online/reviewing-standard-projects.html");
    }
```

The phrase "Dolch Sight Words" will be extracted as a localizable string from this code.
Most likely, there is another instance of this string exposed for translation elsewhere.
The issue is, if that other instance has context or translator comments added to it, then it will be treated as a separate resource.
When the catalog is translated, if the two entries for this string are translated differently, then this comparison will fail at runtime.

The second issue is that this assumes all instances of a string will always match in the program.
If any instance changes, however, then it will break not only localized products, but the source product as well.
Consider the following example:

```{Rcpp}
#| include: true
#| eval: false
static wxString FormatClozeValuesLabel(const wxString& testName)
    {
    return testName + L" " + _(L"(predicted cloze scores)");
    }
...
static wxString StripClozeValuesLabel(const wxString& testName)
    {
    wxString begin;
    if (testName.EndsWith(_(L"(pred. cloze scores)"), &begin))
        {
        begin.Trim();
        return begin;
        }
```

Here we can see that a function is looking for the phrase "(pred. cloze scores)" and removing it if it finds it.
There is another function that builds a string and presumably appends "(pred. cloze scores)" to it.
Note, however, that this other function must have been changed and now appends "(predicted cloze scores)".
Because of this, the source (e.g., English) version of the program (along with localized versions) will all break.

The recommended solution is to make this an extractable string from only one location.
Then, this one resource can be used from all other locations in the program.
This will ensure that if this string needs to be changed or have context added to it, it won't negatively impact the program.
For example, this string could be returned from a common function:

```{Rcpp}
#| include: true
#| eval: false
static wxString GetPredClozeLabel()
    { return _(L"(predicted cloze scores)"); }
...
    return testName + L" " + GetPredClozeLabel();
...
    if (testName.EndsWith(GetPredClozeLabel(), &begin))
```

## Multipart Strings {#sec-multipart-strings}

Multipart strings (or "mega strings") are single string resources that are split at runtime into smaller strings [@{madden:2019}65-66].

For example, consider a resource string such as:

"Name\ \ \ \ \ \ Password\ \ Domain\ \ \ \ "

While this is one string, it contains suspicious looking blocks of spaces in between each word.
As it turns out, an application may be splitting this string into 10-character sections at runtime:

```{r}
#| echo: false
#| fig-format: png
#| fig-height: 2
#| fig-width: 2
#| fig-align: center
library(DiagrammeR)

words_graph <-
  create_graph() %>%
  add_node(label = '“Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;”',
           node_aes = node_aes(
            shape = "rectangle",
            fixedsize = F,
            fontcolor = "black",
            color = "steelblue",
            fillcolor = "lightblue")) %>%
  add_node(label  = '“Password&nbsp;&nbsp;”',
           node_aes = node_aes(
            shape = "rectangle",
            fixedsize = F,
            fontcolor = "black",
            color = "steelblue",
            fillcolor = "lightblue")) %>%
  add_node(label = '“Domain&nbsp;&nbsp;&nbsp;&nbsp;”',
           node_aes = node_aes(
            shape = "rectangle",
            fixedsize = F,
            fontcolor = "black",
            color = "steelblue",
            fillcolor = "lightblue")) %>%
  add_node(label = '“Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Password&nbsp;&nbsp;Domain&nbsp;&nbsp;&nbsp;&nbsp;”',
           node_aes = node_aes(
            shape = "rectangle",
            fixedsize = F,
            color = "steelblue",
            fontcolor = "black",
            fillcolor = "orange"),
           to = c(1:3))

render_graph(words_graph)
```

Then, it will use each of these sections as a separate resource.
This is a bad practice found in legacy software, and can be thought of as the opposite of concatenating strings (another bad i18n practice).

The issue with this practice is that it forces translations to a constrained length (10-characters for each word in this example).
Next, it is difficult to translate, as the translator must count the characters and spaces for each word segment, not just the entire string.
(And this is assuming that the behavior of this string was even communicated to the translators.)
Finally, l10n quality assurance tools are not designed to check unusual strings like this.
Validating translations for these resources requires custom tools, which creates unnecessary technical debt.

If a translator doesn't format each segment of this string perfectly, then at best the translations will overlap or be clipped at runtime.
At worst, the program will crash in situations where the full string is less than 30 characters.

It is preferred to use separate resources for each string.
This ensures that the translations aren't constrained to arbitrary lengths and standard QA tools will be able to review the resources.

Checking the option [**Multipart strings (\"mega strings\")**](#source-code-options) will warn about any possible multipart strings.
